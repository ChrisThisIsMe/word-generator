import streamlit as st

# Configuration de la page
st.set_page_config(page_title="G√©n√©rateur Markdown", layout="wide")
st.title("üìù G√©n√©rateur Markdown multi-r√®gles")

# Champ pour le titre du livre
title = st.text_input("Titre du livre")

# Section pour les r√®gles
st.subheader("R√®gles de transformation")
col1, col2 = st.columns([2, 1])
with col1:
    keyword_input = st.text_input("Mot-cl√©", key="keyword")
with col2:
    style_input = st.text_input("Style (ex: ##)", key="style")

# Initialiser la liste des r√®gles
if "all_rules" not in st.session_state:
    st.session_state.all_rules = []

# Ajouter une r√®gle
if st.button("‚ûï Ajouter la r√®gle"):
    if keyword_input.strip() and style_input.strip():
        st.session_state.all_rules.append((keyword_input.strip(), style_input.strip()))
    else:
        st.warning("Les deux champs doivent √™tre remplis.")

# Affichage des r√®gles
if st.session_state.all_rules:
    st.markdown("**R√®gles ajout√©es :**")
    for idx, (k, s) in enumerate(st.session_state.all_rules, 1):
        st.write(f"{idx}. `{k}` ‚Üí `{s}`")

# Zone de texte
st.subheader("Colle ici ton texte brut :")
raw_text = st.text_area("Texte √† transformer", height=300)

# Fonction de transformation
def detect_markdown_from_text(text, title, rules):
    lines = text.strip().split('\n')
    output = [f"# {title.strip()}"] if title.strip() else []
    for line in lines:
        clean = line.strip()
        if not clean:
            continue
        matched = False
        for keyword, style_tag in rules:
            if clean.lower().startswith(keyword.lower()):
                output.append(f"{style_tag} {clean}")
                matched = True
                break
        if not matched:
            output.append(clean)
    return "\n\n".join(output)

# G√©n√©ration du fichier
if st.button("üíæ G√©n√©rer le fichier .md"):
    if not raw_text:
        st.warning("Le champ de texte est vide.")
    elif not st.session_state.all_rules:
        st.warning("Ajoute au moins une r√®gle.")
    else:
        processed_text = detect_markdown_from_text(raw_text, title, st.session_state.all_rules)
        st.download_button("üì• T√©l√©charger le Markdown", data=processed_text, file_name="output.md", mime="text/markdown")
